// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Models;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(CommercialSystemContext))]
    [Migration("20231120182907_first_migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("account_id_seq");

            modelBuilder.HasSequence("article_id_seq");

            modelBuilder.HasSequence("article_supplier_id_seq");

            modelBuilder.HasSequence("department_id_seq");

            modelBuilder.HasSequence("department_needs_id_seq");

            modelBuilder.HasSequence("need_details_id_seq");

            modelBuilder.HasSequence("proforma_send_details_id_seq");

            modelBuilder.HasSequence("proforma_send_id_seq");

            modelBuilder.HasSequence("proformat_details_id_seq");

            modelBuilder.HasSequence("proformat_id_seq");

            modelBuilder.HasSequence("purchase_order_details_id_seq");

            modelBuilder.HasSequence("purchase_order_id_seq");

            modelBuilder.HasSequence("supplier_id_seq");

            modelBuilder.Entity("server.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int>("IdDepartment")
                        .HasColumnType("integer")
                        .HasColumnName("id_department");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<int>("Profil")
                        .HasColumnType("integer")
                        .HasColumnName("profil");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartment");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("server.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.ToTable("article", (string)null);
                });

            modelBuilder.Entity("server.Models.ArticleSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<int>("IdSupplier")
                        .HasColumnType("integer")
                        .HasColumnName("id_supplier");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdSupplier");

                    b.ToTable("article_supplier", (string)null);
                });

            modelBuilder.Entity("server.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("server.Models.DepartmentNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateSend")
                        .HasColumnType("date")
                        .HasColumnName("date_send");

                    b.Property<int>("IdDepartment")
                        .HasColumnType("integer")
                        .HasColumnName("id_department");

                    b.Property<int>("Validation")
                        .HasColumnType("integer")
                        .HasColumnName("validation");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartment");

                    b.ToTable("department_needs", (string)null);
                });

            modelBuilder.Entity("server.Models.NeedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateNeed")
                        .HasColumnType("date")
                        .HasColumnName("date_need");

                    b.Property<int>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<int>("IdDepartmentNeeds")
                        .HasColumnType("integer")
                        .HasColumnName("id_department_needs");

                    b.Property<string>("Motif")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("motif");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdDepartmentNeeds");

                    b.ToTable("need_details", (string)null);
                });

            modelBuilder.Entity("server.Models.NeedGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("FinalDateNeed")
                        .HasColumnType("date")
                        .HasColumnName("final_date_need");

                    b.Property<int>("IdArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.ToTable("need_group", (string)null);
                });

            modelBuilder.Entity("server.Models.NeedGroupNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdNeedDetails")
                        .HasColumnType("integer")
                        .HasColumnName("id_need_details");

                    b.Property<int>("IdNeedGroup")
                        .HasColumnType("integer")
                        .HasColumnName("id_need_group");

                    b.HasKey("Id");

                    b.HasIndex("IdNeedDetails");

                    b.HasIndex("IdNeedGroup");

                    b.ToTable("need_group_need", (string)null);
                });

            modelBuilder.Entity("server.Models.NeedGroupProformaSend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdNeedGroup")
                        .HasColumnType("integer")
                        .HasColumnName("id_need_group");

                    b.Property<int>("IdProformaSend")
                        .HasColumnType("integer")
                        .HasColumnName("id_proforma_send");

                    b.HasKey("Id");

                    b.HasIndex("IdNeedGroup");

                    b.HasIndex("IdProformaSend");

                    b.ToTable("need_group_proforma_send", (string)null);
                });

            modelBuilder.Entity("server.Models.Proforma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('proformat_id_seq'::regclass)");

                    b.Property<DateOnly>("DateReceived")
                        .HasColumnType("date")
                        .HasColumnName("date_received");

                    b.Property<int>("IdProformaSend")
                        .HasColumnType("integer")
                        .HasColumnName("id_proforma_send");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.HasKey("Id");

                    b.HasIndex("IdProformaSend");

                    b.ToTable("proforma", (string)null);
                });

            modelBuilder.Entity("server.Models.ProformaDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('proformat_details_id_seq'::regclass)");

                    b.Property<int>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<int>("IdProforma")
                        .HasColumnType("integer")
                        .HasColumnName("id_proforma");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<double>("SalePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("sale_price");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<double>("Tva")
                        .HasColumnType("double precision")
                        .HasColumnName("tva");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdProforma");

                    b.ToTable("proforma_details", (string)null);
                });

            modelBuilder.Entity("server.Models.ProformaSend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateSend")
                        .HasColumnType("date")
                        .HasColumnName("date_send");

                    b.Property<int>("IdSupplier")
                        .HasColumnType("integer")
                        .HasColumnName("id_supplier");

                    b.HasKey("Id");

                    b.HasIndex("IdSupplier");

                    b.ToTable("proforma_send", (string)null);
                });

            modelBuilder.Entity("server.Models.ProformaSendDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateNeed")
                        .HasColumnType("date")
                        .HasColumnName("date_need");

                    b.Property<int>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<int>("IdProformaSend")
                        .HasColumnType("integer")
                        .HasColumnName("id_proforma_send");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("IdProformaSend");

                    b.ToTable("proforma_send_details", (string)null);
                });

            modelBuilder.Entity("server.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateSend")
                        .HasColumnType("date")
                        .HasColumnName("date_send");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<int>("IdSupplier")
                        .HasColumnType("integer")
                        .HasColumnName("id_supplier");

                    b.Property<double>("ParcelCharges")
                        .HasColumnType("double precision")
                        .HasColumnName("parcel_charges");

                    b.Property<int>("Payment")
                        .HasColumnType("integer")
                        .HasColumnName("payment");

                    b.Property<double>("SumHt")
                        .HasColumnType("double precision")
                        .HasColumnName("sum_ht");

                    b.Property<double>("SumTtc")
                        .HasColumnType("double precision")
                        .HasColumnName("sum_ttc");

                    b.Property<double>("SumVat")
                        .HasColumnType("double precision")
                        .HasColumnName("sum_vat");

                    b.Property<int>("Validation")
                        .HasColumnType("integer")
                        .HasColumnName("validation");

                    b.HasKey("Id");

                    b.HasIndex("IdSupplier");

                    b.ToTable("purchase_order", (string)null);
                });

            modelBuilder.Entity("server.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<DateOnly>("DateNeed")
                        .HasColumnType("date")
                        .HasColumnName("date_need");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('purchase_order_details_id_seq'::regclass)");

                    b.Property<int>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<int>("IdPurchaseOrder")
                        .HasColumnType("integer")
                        .HasColumnName("id_purchase order");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<double>("SalePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("sale_price");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<double>("Vat")
                        .HasColumnType("double precision")
                        .HasColumnName("vat");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdPurchaseOrder");

                    b.ToTable("purchase order_details", (string)null);
                });

            modelBuilder.Entity("server.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("server.Models.VBesoin", b =>
                {
                    b.Property<string>("Article")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("article");

                    b.Property<DateOnly?>("DateNeed")
                        .HasColumnType("date")
                        .HasColumnName("date_need");

                    b.Property<DateOnly?>("DateSend")
                        .HasColumnType("date")
                        .HasColumnName("date_send");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<int?>("IdDepartmentNeeds")
                        .HasColumnType("integer")
                        .HasColumnName("id_department_needs");

                    b.Property<int?>("IdNeedDetails")
                        .HasColumnType("integer")
                        .HasColumnName("id_need_details");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<int?>("Validation")
                        .HasColumnType("integer")
                        .HasColumnName("validation");

                    b.ToTable((string)null);

                    b.ToView("v_besoin", (string)null);
                });

            modelBuilder.Entity("server.Models.VBesoinAGrouper", b =>
                {
                    b.Property<string>("Article")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("article");

                    b.Property<DateOnly?>("DateNeed")
                        .HasColumnType("date")
                        .HasColumnName("date_need");

                    b.Property<DateOnly?>("DateSend")
                        .HasColumnType("date")
                        .HasColumnName("date_send");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<int?>("IdDepartmentNeeds")
                        .HasColumnType("integer")
                        .HasColumnName("id_department_needs");

                    b.Property<int?>("IdNeedDetails")
                        .HasColumnType("integer")
                        .HasColumnName("id_need_details");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<int?>("Validation")
                        .HasColumnType("integer")
                        .HasColumnName("validation");

                    b.ToTable((string)null);

                    b.ToView("v_besoin_a_grouper", (string)null);
                });

            modelBuilder.Entity("server.Models.VGroupNonProformer", b =>
                {
                    b.Property<DateOnly?>("FinalDateNeed")
                        .HasColumnType("date")
                        .HasColumnName("final_date_need");

                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("integer")
                        .HasColumnName("id_article");

                    b.Property<string>("Numero")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.ToTable((string)null);

                    b.ToView("v_group_non_proformer", (string)null);
                });

            modelBuilder.Entity("server.Models.Account", b =>
                {
                    b.HasOne("server.Models.Department", "IdDepartmentNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("IdDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_department");

                    b.Navigation("IdDepartmentNavigation");
                });

            modelBuilder.Entity("server.Models.ArticleSupplier", b =>
                {
                    b.HasOne("server.Models.Article", "IdArticleNavigation")
                        .WithMany("ArticleSuppliers")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_article_supplier_article");

                    b.HasOne("server.Models.Supplier", "IdSupplierNavigation")
                        .WithMany("ArticleSuppliers")
                        .HasForeignKey("IdSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_article_supplier_supplier");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdSupplierNavigation");
                });

            modelBuilder.Entity("server.Models.DepartmentNeed", b =>
                {
                    b.HasOne("server.Models.Department", "IdDepartmentNavigation")
                        .WithMany("DepartmentNeeds")
                        .HasForeignKey("IdDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_needs_department");

                    b.Navigation("IdDepartmentNavigation");
                });

            modelBuilder.Entity("server.Models.NeedDetail", b =>
                {
                    b.HasOne("server.Models.Article", "IdArticleNavigation")
                        .WithMany("NeedDetails")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_need_details_article");

                    b.HasOne("server.Models.DepartmentNeed", "IdDepartmentNeedsNavigation")
                        .WithMany("NeedDetails")
                        .HasForeignKey("IdDepartmentNeeds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_need_details_department_needs");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdDepartmentNeedsNavigation");
                });

            modelBuilder.Entity("server.Models.NeedGroup", b =>
                {
                    b.HasOne("server.Models.Article", "IdArticleNavigation")
                        .WithMany("NeedGroups")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_need_group_article");

                    b.Navigation("IdArticleNavigation");
                });

            modelBuilder.Entity("server.Models.NeedGroupNeed", b =>
                {
                    b.HasOne("server.Models.NeedDetail", "IdNeedDetailsNavigation")
                        .WithMany("NeedGroupNeeds")
                        .HasForeignKey("IdNeedDetails")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_need_group_need_need_details");

                    b.HasOne("server.Models.NeedGroup", "IdNeedGroupNavigation")
                        .WithMany("NeedGroupNeeds")
                        .HasForeignKey("IdNeedGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_need_group_need_need_group");

                    b.Navigation("IdNeedDetailsNavigation");

                    b.Navigation("IdNeedGroupNavigation");
                });

            modelBuilder.Entity("server.Models.NeedGroupProformaSend", b =>
                {
                    b.HasOne("server.Models.NeedGroup", "IdNeedGroupNavigation")
                        .WithMany("NeedGroupProformaSends")
                        .HasForeignKey("IdNeedGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_need_group_proforma_need_group");

                    b.HasOne("server.Models.ProformaSend", "IdProformaSendNavigation")
                        .WithMany("NeedGroupProformaSends")
                        .HasForeignKey("IdProformaSend")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_need_group_proforma_send_proforma_send");

                    b.Navigation("IdNeedGroupNavigation");

                    b.Navigation("IdProformaSendNavigation");
                });

            modelBuilder.Entity("server.Models.Proforma", b =>
                {
                    b.HasOne("server.Models.ProformaSend", "IdProformaSendNavigation")
                        .WithMany("Proformas")
                        .HasForeignKey("IdProformaSend")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proforma_proforma_send");

                    b.Navigation("IdProformaSendNavigation");
                });

            modelBuilder.Entity("server.Models.ProformaDetail", b =>
                {
                    b.HasOne("server.Models.Article", "IdArticleNavigation")
                        .WithMany("ProformaDetails")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proforma_details_article");

                    b.HasOne("server.Models.Proforma", "IdProformaNavigation")
                        .WithMany("ProformaDetails")
                        .HasForeignKey("IdProforma")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proforma_details_proforma");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdProformaNavigation");
                });

            modelBuilder.Entity("server.Models.ProformaSend", b =>
                {
                    b.HasOne("server.Models.Supplier", "IdSupplierNavigation")
                        .WithMany("ProformaSends")
                        .HasForeignKey("IdSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proforma_send_supplier");

                    b.Navigation("IdSupplierNavigation");
                });

            modelBuilder.Entity("server.Models.ProformaSendDetail", b =>
                {
                    b.HasOne("server.Models.ProformaSend", "IdProformaSendNavigation")
                        .WithMany("ProformaSendDetails")
                        .HasForeignKey("IdProformaSend")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proforma_send_details_proforma_send");

                    b.Navigation("IdProformaSendNavigation");
                });

            modelBuilder.Entity("server.Models.PurchaseOrder", b =>
                {
                    b.HasOne("server.Models.Supplier", "IdSupplierNavigation")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("IdSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_order_supplier");

                    b.Navigation("IdSupplierNavigation");
                });

            modelBuilder.Entity("server.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("server.Models.Article", "IdArticleNavigation")
                        .WithMany()
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase order_details_article");

                    b.HasOne("server.Models.PurchaseOrder", "IdPurchaseOrderNavigation")
                        .WithMany()
                        .HasForeignKey("IdPurchaseOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase order_details_purchase_order");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdPurchaseOrderNavigation");
                });

            modelBuilder.Entity("server.Models.Article", b =>
                {
                    b.Navigation("ArticleSuppliers");

                    b.Navigation("NeedDetails");

                    b.Navigation("NeedGroups");

                    b.Navigation("ProformaDetails");
                });

            modelBuilder.Entity("server.Models.Department", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("DepartmentNeeds");
                });

            modelBuilder.Entity("server.Models.DepartmentNeed", b =>
                {
                    b.Navigation("NeedDetails");
                });

            modelBuilder.Entity("server.Models.NeedDetail", b =>
                {
                    b.Navigation("NeedGroupNeeds");
                });

            modelBuilder.Entity("server.Models.NeedGroup", b =>
                {
                    b.Navigation("NeedGroupNeeds");

                    b.Navigation("NeedGroupProformaSends");
                });

            modelBuilder.Entity("server.Models.Proforma", b =>
                {
                    b.Navigation("ProformaDetails");
                });

            modelBuilder.Entity("server.Models.ProformaSend", b =>
                {
                    b.Navigation("NeedGroupProformaSends");

                    b.Navigation("ProformaSendDetails");

                    b.Navigation("Proformas");
                });

            modelBuilder.Entity("server.Models.Supplier", b =>
                {
                    b.Navigation("ArticleSuppliers");

                    b.Navigation("ProformaSends");

                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
